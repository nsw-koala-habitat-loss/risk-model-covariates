?jobRunScript
library(rstudioapi)
script_names <- c('landuse', 'income', 'pop_den', 'remoteness', 'fire', 'forest_tenure', 'soil_type', 'slope_elev', 'soil_nitrogen', 'soil_fert', 'climate', 'drought')
for (name in script_names) {
jobRunScript(
file.path('code/R', paste0(name, '.R')),
name = name,
workingDir = 'H://risk-model-covariates',
importEnv = FALSE,
exportEnv = ""
)
}
# Test outputs
library(terra)
library(stringr)
library(sf)
output_dir <- "output"
nsw <- file.path('data/Admin_boundaries/nsw_lga.shp') %>%
vect()
load_covariates <- function(output_dir, idx = NULL) {
output_files <- list.files(output_dir, "*.tif$", full.names = T)
lyr_names <- list.files(output_dir, "*.tif$") %>% tools::file_path_sans_ext()
if (is.null(idx)) {
idx <- 1:length(lyr_names)
}
comb_rast <- rast(output_files[idx])
names(comb_rast) <- lyr_names[idx]
return(comb_rast)
}
comb_rast <- load_covariates(output_dir, c(1:7, 9:16))
comb_rast
all_rast
all_rast <- lapply(1:16, \(i) load_covariates(output_dir, i))
all_rast
comb_rast <- load_covariates(output_dir)
comb_rast
writeRaster(comb_rast, filepath(output_dir, 'comb_rast.tif'), overwrite = T)
writeRaster(comb_rast, file.path(output_dir, 'comb_rast.tif'), overwrite = T)
plot(comb_rast)
library(ggplot2)
ggsave("comb_rast_plot.png", width = 5000, height = 4000, units= 'px', scale = 0.5)
plt <- plot(comb_rast)
ggsave("comb_rast_plot.png", plt, width = 5000, height = 4000, units= 'px', scale = 0.5)
?png
png("comb_rast_plot.png", width = 5000, height = 4000, units = 'px')
plot(comb_rast)
dev.off()
png("comb_rast_plot.png", width = 5000, height = 4000, units = 'px',pointsize = 48)
plot(comb_rast)
dev.off()
png("comb_rast_plot.png", width = 5000, height = 4000, units = 'px',pointsize = 48)
plot(comb_rast)
lines(nsw)
dev.off()
png("comb_rast_plot.png", width = 5000, height = 4000, units = 'px',pointsize = 48)
plot(comb_rast)
lines(nsw, lwd = 5)
dev.off()
png("comb_rast_plot.png", width = 5000, height = 4000, units = 'px',pointsize = 70)
plot(comb_rast)
lines(nsw, lwd = 5)
dev.off()
png("comb_rast_plot.png", width = 5000, height = 4000, units = 'px',pointsize = 48)
plot(comb_rast)
lines(nsw, lwd = 50)
dev.off()
lines(nsw)
png("comb_rast_plot.png", width = 5000, height = 4000, units = 'px',pointsize = 48)
plot(comb_rast, add=T)
png("comb_rast_plot.png", width = 5000, height = 4000, units = 'px',pointsize = 48)
plot(comb_rast)
lines(nsw, lwd = 5, add = T)
dev.off()
png("comb_rast_plot.png", width = 5000, height = 4000, units = 'px',pointsize = 48)
plot(comb_rast)
plot(nsw, lwd = 5, add = T)
dev.off()
png("comb_rast_plot.png", width = 5000, height = 4000, units = 'px',pointsize = 48)
plot(nsw, lwd = 5)
dev.off()
png("comb_rast_plot.png", width = 5000, height = 4000, units = 'px',pointsize = 48)
plot(nsw, lwd = 5)
plot(comb_rast, add =T)
dev.off()
grDevices(colors)
grDevices::colrs()
grDevices::colors()
grDevices::terrain.colors(50)
grDevices::heat.colors(50)
plot(comb_rast, col = grDevices::heat.colors(50))
png("comb_rast_plot.png", width = 5000, height = 4000, units = 'px',pointsize = 48)
plot(comb_rast, col = grDevices::heat.colors(50))
dev.off()
png("comb_rast_plot.png", width = 5000, height = 4000, units = 'px',pointsize = 60)
plot(comb_rast)
dev.off()
png("comb_rast_plot.png", width = 1000, height = 800, units = 'px',pointsize = 12)
plot(comb_rast[[1]])
lines(nsw)
dev.off()
png("comb_rast_plot.png", width = 500, height = 400, units = 'px',pointsize = 12)
plot(comb_rast[[1]])
lines(nsw)
dev.off()
png("comb_rast_plot.png", width = 1000, height = 800, units = 'px',pointsize = 12)
plot(comb_rast[[1]])
lines(nsw)
dev.off()
png("comb_rast_plot.png", width = 1000, height = 800, units = 'px',pointsize = 24)
plot(comb_rast[[1]])
lines(nsw)
dev.off()
nlyrs(comb_rast)
length(comb_rast)
nrow(comb_rast)
length(names(comb_rast))
for (i in 1:length(names(comb_rast))){
name <- names(comb_rast)[i]
png(paste0("plots/", name, ".png"), width = 1000, height = 800, units = 'px',pointsize = 24)
plot(comb_rast[[i]])
lines(nsw)
dev.off()
}
names(comb_rast)
hcl.pals()
example("hcl.colors")
hcl.pals()
example("hcl.colors")
hcl.colors(11, "purples"()
)
hcl.colors(11, "purples"_
hcl.colors(11, "purples")
categorical_vars <- c('drought', 'fire', 'forest_code', 'forest_tenure', 'forest_tenure_type', 'landuse', 'soil_fert', 'soil_type')
for (i in 1:length(names(comb_rast))){
name <- names(comb_rast)[i]
png(paste0("plots/", name, ".png"), width = 1000, height = 800, units = 'px',pointsize = 24)
col_scheme <- ifelse(name %in% categorical_vars, grDevices::hcl.colors(20, 'qualitative'), grDevices::hcl.colors(50, 'volcano'))
plot(comb_rast[[i]])
lines(nsw)
dev.off()
}
grDevices::hcl.colors(20, 'qualitative')
grDevices::hcl.colors(20, 'qualitative')
hcl.swatch('qualitative')
hcl.swatch('qualitative')
hcl.swatch('sequential')
hcl.swatch()
hcl.swatch('qualitative')
for (i in 1:length(names(comb_rast))){
name <- names(comb_rast)[i]
png(paste0("plots/", name, ".png"), width = 1000, height = 800, units = 'px',pointsize = 24)
col_scheme <- ifelse(name %in% categorical_vars, grDevices::hcl.colors(20, 'dynamic'), grDevices::hcl.colors(50, 'volcano'))
plot(comb_rast[[i]])
lines(nsw)
dev.off()
}
grDevices::hcl.colors(20, 'dynamic')
grDevices::hcl.colors(50, 'volcano')
hcl.swatch('qualitative')
hcl.swatch()
hcl.swatch('sequential')
for (i in 1:length(names(comb_rast))){
name <- names(comb_rast)[i]
png(paste0("plots/", name, ".png"), width = 1000, height = 800, units = 'px',pointsize = 24)
col_scheme <- ifelse(name %in% categorical_vars, grDevices::hcl.colors(20, 'dynamic'), grDevices::hcl.colors(50, 'OrRd'))
plot(comb_rast[[i]], col = col_scheme)
lines(nsw)
dev.off()
}
for (i in 1:length(names(comb_rast))){
name <- names(comb_rast)[i]
png(paste0("plots/", name, ".png"), width = 1000, height = 800, units = 'px',pointsize = 24)
col_scheme <- ifelse(name %in% categorical_vars, grDevices::hcl.colors(4, 'dynamic'), rev(grDevices::terrain.colors(50)))
plot(comb_rast[[i]], col = col_scheme)
lines(nsw)
dev.off()
}
col_scheme
grDevices::hcl.colors(4, 'dynamic')
rev(grDevices::terrain.colors(50))
for (i in 1:length(names(comb_rast))){
name <- names(comb_rast)[i]
png(paste0("plots/", name, ".png"), width = 1000, height = 800, units = 'px',pointsize = 24)
if(name %in% categorical_vars) {
col_scheme <- grDevices::hcl.colors(4, 'dynamic')
} else {
col_scheme = rev(grDevices::terrain.colors(50))
}
plot(comb_rast[[i]], col = col_scheme)
lines(nsw)
dev.off()
}
for (i in 1:length(names(comb_rast))){
name <- names(comb_rast)[i]
png(paste0("plots/", name, ".png"), width = 1000, height = 800, units = 'px',pointsize = 24)
if(name %in% categorical_vars) {
col_scheme <- grDevices::hcl.colors(10, 'dynamic')
} else {
col_scheme = rev(grDevices::terrain.colors(50))
}
plot(comb_rast[[i]], col = col_scheme)
lines(nsw)
dev.off()
}
categorical_vars <- c('drought', 'fire', 'forest_code', 'forest_tenure', 'forest_tenure_type', 'remoteness', 'landuse', 'soil_fert', 'soil_type')
for (i in 1:length(names(comb_rast))){
name <- names(comb_rast)[i]
png(paste0("plots/", name, ".png"), width = 1000, height = 800, units = 'px',pointsize = 24)
if(name %in% categorical_vars) {
col_scheme <- grDevices::hcl.colors(10, 'dynamic')
} else {
col_scheme = rev(grDevices::terrain.colors(50))
}
plot(comb_rast[[i]], col = col_scheme)
lines(nsw)
dev.off()
}
library(tidyverse)
library(terra)
library(sf)
source('code/R/spatial_functions.R')
dirname <- "H://risk-model-covariates/code"
## Landuse shp
nsw_landuse_2013 <- file.path(dirname, "../data/landuse/landnswlanduse2013/Land_NSW_Landuse_2013/Data/Shapefile/NSW_Landuse_2013.shp")
nsw_shp <- st_read(nsw_landuse_2013)
unique(nsw_shp$d_Tertiary)
unique(nsw_shp$d_Tertiary) %>% sort()
library(stringi)
unique(nsw_shp$d_Tertiary) %>% sort() %>% stri_extract_first_regex("[0-9]+")
unique(nsw_shp$d_Tertiary) %>% sort() %>% stri_extract_second_regex("[0-9]+")
unique(nsw_shp$d_Tertiary) %>% sort()
unique(nsw_shp$TertiaryAL) %>% sort()
data.frame(code = unique(nsw_shp$TertiaryAL) %>% sort(), description=unique(nsw_shp$d_Tertiary) %>% sort())
library(tidyverse)
library(terra)
library(sf)
library(foreign)
source('code/R/spatial_functions.R')
dirname <- "H://risk-model-covariates/code"
prop_value_ha <- file.path(dirname, "../data/prop_size_value/Prop_value_ha_20230101.dbf") %>%
read.dbf()
properties <- file.path(dirname, "../data/prop_size_value/Property_EPSG4283.gdb") %>%
st_read(layer="Property")
properties_joined <- properties %>%
left_join(prop_value_ha, by = join_by("gurasid"=="PROPERTY_I"))
head(properties_joined )
head(prop_value_ha)
names(prop_value_ha)
properties_joined <- properties %>%
left_join(prop_value_ha, by = join_by("principaladdresssiteoid"=="PROPERTY_I"))
properties_joined
head(properties_joined )
sum(!is.na(properties_joined$value_ha))
sum(is.na(properties_joined$value_ha))
properties_joined <- properties %>%
left_join(prop_value_ha, by = join_by("propid"=="PROPERTY_I"))
sum(!is.na(properties_joined$value_ha))
sum(is.na(properties_joined$value_ha))
gc()
value = rast('output/prop_value.tif')
value
plot(value)
plot(value, range = c(0,10000))
plot(value, range = c(0,100000))
plot(value, levels = 0:10*1000)
plot(value, levels = (0:10)*1000)
(0:10)*1000
plot(value, levels = (0:10)*1000, type = 'classes')
plot(value, levels = c((0:10)*1000, 1e10), type = 'classes')
plot(value, breaks = c((0:10)*1000, 1e10), type = 'interval')
library(rstudioapi)
script_names <- c('landuse', 'income', 'pop_den', 'remoteness', 'fire', 'forest_tenure', 'soil_type', 'slope_elev', 'soil_nitrogen', 'soil_fert', 'climate', 'drought')
# Run climate for all years in parallel
for (yr in 1988:2023) {
jobRunScript(
file.path('code/R/climate.R'),
name = paste0('climate_', yr),
workingDir = 'H://risk-model-covariates',
importEnv = FALSE,
exportEnv = ""
)
Sys.sleep(1)
}
args
commandArgs()
commandArgs(trailingOnly=T)
commandArgs(trailingOnly=T)[1]
2023-1988
for (yr in 1988:2023) {
jobRunScript(
file.path('code/R/climate.R'),
name = paste0('climate_', yr),
workingDir = 'H://risk-model-covariates',
importEnv = FALSE,
exportEnv = ""
)
Sys.sleep(1)
}
?jobRunScript
args <- commandArgs(trailingOnly=T)
args
# Run climate for all years in parallel
for (yr in 1988:2023) {
jobRunScript(
file.path('code/R/climate.R'),
name = paste0('climate_', yr),
workingDir = 'H://risk-model-covariates',
importEnv = T,
exportEnv = ""
)
Sys.sleep(.1)
}
exists('yr')
!is.na(args[1])
# Run climate for all years in parallel
for (y in 1988:2023) {
yr <- c(y)
jobRunScript(
file.path('code/R/climate.R'),
name = paste0('climate_', yr),
workingDir = 'H://risk-model-covariates',
importEnv = T,
exportEnv = ""
)
Sys.sleep(.05)
}
# Run climate for all years in parallel
for (y in 1999) {
yr <- c(y)
jobRunScript(
file.path('code/R/climate.R'),
name = paste0('climate_', yr),
workingDir = 'H://risk-model-covariates',
importEnv = T,
exportEnv = ""
)
Sys.sleep(.05)
}
# Run climate for all years in parallel
for (y in 1989:1992) {
yr <- c(y)
jobRunScript(
file.path('code/R/climate.R'),
name = paste0('climate_', yr),
workingDir = 'H://risk-model-covariates',
importEnv = T,
exportEnv = ""
)
Sys.sleep(.05)
}
# Run climate for all years in parallel
for (y in 1988:2023) {
yr <- c(y)
jobRunScript(
file.path('code/R/climate.R'),
name = paste0('climate_', yr),
workingDir = 'H://risk-model-covariates',
importEnv = T,
exportEnv = ""
)
Sys.sleep(.01)
}
